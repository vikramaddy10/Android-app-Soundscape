package com.example.aditya.mp3_player;

import android.Manifest;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.DividerItemDecoration;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.SeekBar;
import android.widget.Toast;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {
    private ArrayList<SongInfo> _songs = new ArrayList<SongInfo>();
    RecyclerView recyclerView;
    SeekBar seekBar;
    ImageView rainplay,birdplay;
    SongAdapter songAdapter;
    MediaPlayer mediaplayer,mp;
    public String currentstatus;
    static int raincount=0,birdcount=0;
    private Handler myHandler=new Handler();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        recyclerView = (RecyclerView)findViewById(R.id.RecyclerView);
        rainplay =(ImageView)findViewById(R.id.rainplay);
        birdplay =(ImageView)findViewById(R.id.birdplay);
        seekBar = (SeekBar)findViewById(R.id.seekBar);
        //SongInfo s= new SongInfo("Kill Bill","artist name","https://gaana.com/song/despacito-159");
        //_songs.add(s);
        songAdapter = new SongAdapter(this,_songs);
        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);
        DividerItemDecoration divideItemDecoration = new DividerItemDecoration(recyclerView.getContext(),linearLayoutManager.getOrientation());
        recyclerView.addItemDecoration(divideItemDecoration);
        recyclerView.setLayoutManager(linearLayoutManager);
        recyclerView.setAdapter(songAdapter);
        rainplay.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if(raincount==0){
                mp =MediaPlayer.create(getApplicationContext(),R.raw.rain);
                mp.start();
                    raincount+=1;
                }
                else{
                    mp.stop();
                    raincount=0;
                }
            }
        });
        birdplay.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if(birdcount==0){
                    mp =MediaPlayer.create(getApplicationContext(),R.raw.bird);
                    mp.start();
                    birdcount+=1;
                }
                else{
                    mp.stop();
                    birdcount=0;
                }
            }
        });
        songAdapter.setOnitemClickListener(new SongAdapter.OnitemClickListener(){

            @Override
            public void onItemClick(final Button b, View v, final SongInfo obj, int position) {
                if (b.getText().equals("Stop")) {
                    mediaplayer.stop();
                    mediaplayer.reset();
                    mediaplayer.release();
                    mediaplayer = null;
                    b.setText("Play");
                } else {

                Runnable runnable = new Runnable() {
                    @Override
                    public void run() {
                       /* if (b.getText().equals("Stop")) {
                            mediaplayer.stop();
                            mediaplayer.reset();
                            mediaplayer.release();
                            mediaplayer = null;
                            b.setText("Play");
                        } else {*/
                            try {
                                mediaplayer = new MediaPlayer();
                                mediaplayer.setDataSource(obj.getSongUrl());
                                mediaplayer.prepareAsync();
                                mediaplayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                                    @Override
                                    public void onPrepared(MediaPlayer mp) {
                                        mp.start();
                                        seekBar.setProgress(0);
                                        seekBar.setMax(mediaplayer.getDuration());
                                        Log.d("Prog", "run: " + mediaplayer.getDuration());
                                    }
                                });
                                b.setText("Stop");


                            } catch (Exception e) {
                            }
                        //}
                    }

                };
                myHandler.postDelayed(runnable, 100);
            }
            }
        });

        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromuser) {
                if(fromuser)
                {
                    mediaplayer.seekTo(progress);
                    seekBar.setProgress(progress);
                }
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {

            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {

            }
        });

        CheckPermissions();

//        Thread t=new MyThread();
//        t.start();
    }

//    public class MyThread extends Thread{
//        @Override
//        public void run() {
//            while(mediaplayer!=null) {
//                try {
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//                Log.d("Runwa", "run: " + 1);
//                if (mediaplayer != null) {
//                    seekBar.post(new Runnable() {
//                        @Override
//                        public void run() {
//                            seekBar.setProgress(mediaplayer.getCurrentPosition());
//                        }
//                    });
//                    seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
//                        @Override
//                        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromuser) {
//                            if(fromuser)
//                            {
//                                mediaplayer.seekTo(progress);
//                                seekBar.setProgress(progress);
//                            }
//                        }
//
//                        @Override
//                        public void onStartTrackingTouch(SeekBar seekBar) {
//
//                        }
//
//                        @Override
//                        public void onStopTrackingTouch(SeekBar seekBar) {
//
//                        }
//                    });
//                    Log.d("Runwa", "run: " + mediaplayer.getCurrentPosition());
//                }
//            }
//        }
//    }
    private void CheckPermissions(){
        if(Build.VERSION.SDK_INT >=23) {
            if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.READ_EXTERNAL_STORAGE)
                    != PackageManager.PERMISSION_GRANTED) {
                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 123);
                return;
            }
        }
                loadSongs();
        }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode){
            case 123:
                if(grantResults[0]==PackageManager.PERMISSION_GRANTED){
                    loadSongs();
                }else{
                    Toast.makeText(this,"Permission Denied",Toast.LENGTH_SHORT).show();
                    CheckPermissions();
                }
                break;
            default:
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }
    private void loadSongs(){
        Uri uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
        String selection = MediaStore.Audio.Media.IS_MUSIC+"!=0";
        Cursor cursor = getContentResolver().query(uri,null,selection,null,null);

        if(cursor!=null){
            if(cursor.moveToFirst()){
                do{
                    String name=cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.DISPLAY_NAME));
                    String artist=cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.ARTIST));
                    String Url=cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.DATA));
                    SongInfo s= new SongInfo(name,artist,Url);
                    _songs.add(s);
                }while (cursor.moveToNext());
            }
            cursor.close();
            songAdapter = new SongAdapter(this,_songs);
        }
    }
}
